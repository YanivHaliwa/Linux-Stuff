#!/usr/bin/env python
import os
import sys
import hashlib
from collections import defaultdict

# ANSI color codes for colorful output
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    PURPLE = '\033[95m'  # Light Purple
    ORANGE ='\033[33m'  # Yellow, often appears close to orange

def get_file_hash(file_path):
    """Calculate and return the MD5 hash of a file."""
    with open(file_path, 'rb') as f:
        file_hash = hashlib.md5()
        while chunk := f.read(8192):
            file_hash.update(chunk)
    return file_hash.hexdigest()

def print_colored(text, color):
    """Print the text with the specified color."""
    print(f"{color}{text}{Colors.RESET}")

def normalize_path(path):
    """Remove redundant slashes and normalize the path."""
    return os.path.normpath(path)

def compare_folders(folder1, folder2):
    """Compare files between two folders and print unique/common files."""
    folder1_files = defaultdict(list)
    folder2_files = defaultdict(list)
    
    def should_ignore(path):
        """Check if the path should be ignored."""
        return '.git' in path.split(os.path.sep) or '.trash' in path.split(os.path.sep)

    # Map file hashes to file paths in folder1
    for root, _, files in os.walk(folder1):
        if should_ignore(root):
            continue
        for file in files:
            file_path = normalize_path(os.path.join(root, file))
            if should_ignore(file_path):
                continue
            rel_path = os.path.relpath(file_path, folder1)
            folder1_files[file].append(rel_path)

    # Map file hashes to file paths in folder2
    for root, _, files in os.walk(folder2):
        if should_ignore(root):
            continue
        for file in files:
            file_path = normalize_path(os.path.join(root, file))
            if should_ignore(file_path):
                continue
            rel_path = os.path.relpath(file_path, folder2)
            folder2_files[file].append(rel_path)

    unique_folder1 = set(folder1_files.keys()) - set(folder2_files.keys())
    unique_folder2 = set(folder2_files.keys()) - set(folder1_files.keys())
    common_files = set(folder1_files.keys()) & set(folder2_files.keys())
    
    # Count and display unique files in folder1
    num_folder1 = len(unique_folder1)
    num_folder2 = len(unique_folder2)

    if num_folder1==0 and num_folder2==0:
        print_colored("seems good. both folders are same", Colors.YELLOW)
        return
    
    print_colored(f"{num_folder1} Files unique to {folder1}:", Colors.PURPLE)

    # Count and display unique files in folder2
    print_colored(f"\n{num_folder2} Files unique to {folder2}:", Colors.GREEN)
 
    # Count and display common files
    num_common = len(common_files)
    print_colored(f"\n{num_common} Common files:", Colors.CYAN)
 
    inp=input("\nDo you want to see the list of files with changes? (y/n): ")
    if inp.lower() == 'y':
        if num_folder1 > 0:
            print_colored(f"\nUnique files in {folder1}:", Colors.PURPLE)
            for file in sorted(unique_folder1):
                print(file)
        if num_folder2 > 0:
            print_colored(f"\nUnique files in {folder2}", Colors.GREEN)
            for file in sorted(unique_folder2):
                print(file)
    
def resolve_folder_name(folder):
    """Resolve folder name to full path if '.' is used."""
    return os.path.abspath(folder) if folder == "." else folder

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <folder1> <folder2>")
        sys.exit(1)

    folder1 = resolve_folder_name(sys.argv[1])
    folder2 = resolve_folder_name(sys.argv[2])

    compare_folders(folder1, folder2)
