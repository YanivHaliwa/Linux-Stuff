#!/bin/bash


compress_7zip() {
  local output_path="compressed_files.7z"

  echo "Compressing all files into $output_path with 7-Zip..."

  # Compress all files provided as arguments
  7z a "$output_path" "$@" > /dev/null

  echo "Compression complete: $output_path"
}

compress_zpaq() {
  local output_path="compressed_files.zpaq"

  echo "Compressing all files into $output_path with ZPAQ..."

  # Compress all files provided as arguments
  zpaq a "$output_path" "$@" > /dev/null

  echo "Compression complete: $output_path"
}


# Function to extract files based on file type from the 'file' command or by file extension
extract_file() {
  local file_path="$1"

  # Use 'file' command to determine the type of the file
  file_info=$(file "$file_path")

  echo "File info: $file_info"  # Debugging line to see what the 'file' command returns

  # Check the output from the 'file' command to determine how to decompress the file
  if [[ "$file_info" =~ "gzip compressed data" ]] || [[ "$file_info" =~ "GZIP compressed data" ]]; then
    echo "Extracting gzip file (using pigz)..."
    pigz -d "$file_path"
  elif [[ "$file_info" =~ "bzip2 compressed data" ]] || [[ "$file_info" =~ "BZIP2 compressed data" ]]; then
    echo "Extracting bzip2 file..."
    bzip2 -dk "$file_path"
  elif [[ "$file_info" =~ "XZ compressed data" ]] || [[ "$file_info" =~ "XZ Compressed data" ]]; then
    echo "Extracting xz file..."
    unxz "$file_path"
  elif [[ "$file_info" =~ "Zstandard compressed data" ]] || [[ "$file_info" =~ "ZSTD compressed data" ]]; then
    echo "Extracting zstd file..."
    unzstd "$file_path"
  elif [[ "$file_info" =~ "Zip archive data" ]] || [[ "$file_info" =~ "ZIP archive data" ]]; then
    echo "Extracting zip file..."
    unzip "$file_path"
  elif [[ "$file_info" =~ "RAR archive data" ]] || [[ "$file_info" =~ "rar archive data" ]]; then
    echo "Extracting rar file..."
    unrar x "$file_path"
  elif [[ "$file_info" =~ "7-zip archive data" ]]; then
    echo "Extracting 7z file..."
    7z x "$file_path"
  elif [[ "$file_info" =~ "LZ4 compressed data" ]]; then
    echo "Extracting LZ4 file..."
    lz4 -d "$file_path" "${file_path%.lz4}"
  elif [[ "$file_info" =~ "POSIX tar archive" ]] || [[ "$file_info" =~ "TAR archive data" ]]; then
    echo "Extracting tar file..."
    tar -xf "$file_path"
  elif [[ "$file_info" =~ "ZPAQ archive" ]]; then
    echo "Extracting zpaq file..."
    zpaq x "$file_path"
  elif [[ "$file_info" =~ "KGB Archiver file" ]]; then
    echo "Extracting kgb file..."
    kgb "$file_path"
  else
    # If 'file' command doesn't recognize the type, fall back to extension
    ext="${file_path##*.}"
    echo "Falling back to extension method: $ext"  # Debugging line
    case "$ext" in
      gz)
        echo "Extracting gzip file (using pigz) based on extension..."
        pigz -d "$file_path"
        ;;
      bz2)
        echo "Extracting bzip2 file based on extension..."
        bzip2 -dk "$file_path"
        ;;
      xz)
        echo "Extracting xz file based on extension..."
        unxz "$file_path"
        ;;
      zst)
        echo "Extracting zstd file based on extension..."
        unzstd "$file_path"
        ;;
      zip)
        echo "Extracting zip file based on extension..."
        unzip "$file_path"
        ;;
      rar)
        echo "Extracting rar file based on extension..."
        unrar x "$file_path"
        ;;
      7z)
        echo "Extracting 7z file based on extension..."
        7z x "$file_path"
        ;;
      lz4)
        echo "Extracting LZ4 file based on extension..."
        lz4 -d "$file_path" "${file_path%.lz4}"
        ;;
      tar)
        echo "Extracting tar file based on extension..."
        tar -xf "$file_path"
        ;;
      zpaq)
        echo "Extracting zpaq file based on extension..."
        zpaq x "$file_path"
        ;;
      kgb)
        echo "Extracting kgb file based on extension..."
        kgb "$file_path"
        ;;
      *)
        echo "Unknown file type or unsupported extension: $ext"
        ;;
    esac
  fi
}


# Parse command line options
if [ "$1" == "-cz" ]; then
  if [ -z "$2" ]; then
    echo "Usage: $0 -cz <files_to_compress>"
    exit 1
  fi
  compress_7zip "${@:2}"
  exit 0
fi

if [ "$1" == "-cq" ]; then
  if [ -z "$2" ]; then
    echo "Usage: $0 -cq <files_to_compress>"
    exit 1
  fi
  compress_zpaq "${@:2}"
  exit 0
fi

# Check if the file path is provided for decompression or compression
if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo "Usage: compr <file_to_extract>"
  echo "       compr -cz <files_to_compress_with_7zip>"
  echo "       compr -cq <files_to_compress_with_zpaq>"
  exit 1
fi

if [ ! -f "$1" ] && [ "$1" != "-cz" ] && [ "$1" != "-cq" ]; then
  echo "Error: '$1' is not a valid file or command."
  echo "Usage: compr <file_to_extract>"
  echo "       compr -cz <files_to_compress_with_7zip>"
  echo "       compr -cq <files_to_compress_with_zpaq>"
  exit 1
fi

# Call the extraction function with the provided file path
extract_file "$1"
