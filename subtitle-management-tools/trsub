#!/bin/bash

# Function to display usage instructions
show_help() {
    echo "Usage: $0 <file or directory>"
    echo
    echo "This script searches and downloads English and Hebrew subtitles for video files."
    echo "It can handle both individual files and entire directories containing video files."
    echo
    echo "Arguments:"
    echo "  <file or directory>   Path to a video file (e.g., .mkv, .mp4, .avi, .ts) or a directory containing such files."
    echo
    echo "Functionality:"
    echo "  - Downloads English subtitles for the specified file or directory."
    echo "  - Downloads Hebrew subtitles for the specified file or directory with UTF-8 encoding."
    echo "  - Translates subtitles to hebrew."
    echo "  - Processes files to be same name video and sub file."
    exit 1
}

# Check if the input argument is provided
if [ -z "$1" ]; then
    show_help
fi

# Function to download subtitles
download_subs() {
    local pathi="$1"
    local lang="$2"
    local encoding_flag="$3"

    if [ -d "$pathi" ]; then
        file_type_message="directory"
    fi

    echo -e "\033[1;32mSearching $lang subtitles for the file: $pathi\033[0m"
    subliminal download -f "$pathi" -l "$lang" --provider opensubtitles --provider opensubtitlesvip --provider podnapisi --provider tvsubtitles $encoding_flag 2>/dev/null 
}

find_subtitle() {
    local video_file="$1"
    local base_name=$(basename "$video_file" | sed 's/\.[^.]*$//')  # Strip extension to get base name
    local dir_name=$(dirname "$video_file")  # Get the directory containing the video file

    # Check for Hebrew subtitles and exit early if one is found
    for sub_file in "$dir_name/$base_name"*.srt; do
        if [[ -f "$sub_file" ]]; then
            echo -e "\033[1;32mMatching subtitle found: $sub_file\033[0m"

            # Check if the subtitle file ends with .he.srt, .heb.srt, or contains "-heb.srt"
            if [[ "$sub_file" =~ \.(he|heb)\.srt$ || "$sub_file" =~ -heb\.srt$ ]]; then
                echo -e "\033[1;33mHebrew subtitle already exists: $sub_file\033[0m"
                echo ""
                echo -e "\033[1;33mNothing to translate. Exiting...\033[0m"
                return 0  # Exit the function early since we found a Hebrew subtitle
            fi
        fi
    done

    # No Hebrew subtitle was found, so proceed with translating non-Hebrew subtitles
    for sub_file in "$dir_name/$base_name"*.srt; do
        if [[ -f "$sub_file" ]]; then
          #  echo -e "\033[1;32mTranslating subtitle file: $sub_file\033[0m"
            trf -f "$sub_file"  # Translate the subtitle file
        fi
    done
}
# Determine if the input is a file or directory and process accordingly
if [ -f "$1" ]; then
    # Handle file
    download_subs "$1" "en" ""
    download_subs "$1" "heb" "-e UTF-8"
    echo ""
    echo -e "\033[1;32mTranslate subtitles\033[0m"
    find_subtitle "$1"

elif [ -d "$1" ]; then
    # Handle directory
    cd "$1" || exit 1
    for video_file in *.{mkv,mp4,avi,ts}; do
        if [ -f "$video_file" ]; then
            download_subs "$video_file" "en" ""
            download_subs "$video_file" "heb" "-e UTF-8"
        fi
    done
    vidsubs "$1"
    echo ""
    echo -e "\033[1;32mTranslate subtitles for directory\033[0m"
    trf -d "$1"
    vidsubs "$1"
else
    echo "Error: '$1' is neither a file nor a directory."
    exit 1
fi

echo "Operation complete"

# status=$?
# if [ $status -eq 0 ]; then
#     echo "Operation complete"
#     exit 0
# else
#     exit 1
# fi
